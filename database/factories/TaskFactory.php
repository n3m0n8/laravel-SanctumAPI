<?php

namespace Database\Factories;

use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Task>
 */
class TaskFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition()
    {
        return [
            // he uses a faker class to generate the required key/column values for our tasks table user-related values like name, etc... but the first of the tasks table key-column values which relates to the user_id key-column will not need to be faker autogenerated since it is an INCREMENTAL value assignment on the SQL dtabase...in this case, for the purpose of testing this /tasks route he just grabs a random one of the generated users (presumably generated later) to be assing the faker factory values - to do so we grab all existing user class instance objects (i.e all stored users foreignkey'd on our tasks table as held in SQL in the users table) and then chain on the random() directive method that then is chained on a pointer to that random user's 'id' property 
            'user_id' => User::all()->random()->id,
            //here we assign to the name array element of the user being generated for the task associated to them and we also chain on a unique() method to ensure we get a unique name as well as a sentence() method
            'name' => $this->faker->unique()->name(),// should be name not sentence he made a mistake in tutorial
            'description' => $this->faker->text(),// max chars arg1 optional
            'priority' => $this->faker->randomElement(['low','medium','high',]), //randomElement takes arg1 an array of multiple elements and its algo will return a random one of them
            //BE CARWFUL WITH FAKER- ITS A CLASS - NOT A METHOD FAKER not FAKER()
        ];
    }
}
